@page "/Graph/{ModelIdentifier}"
@layout GraphLayout
@inject IJSRuntime JS
@inject IGraphService graphService;

@if (IsGraphAvailable)
{
    <div class="container-fluid" style="padding-left: 0px">
    <div class="text-start">
            
        <select id="layout-control" class="custom-select text-secondary" aria-label="Default select example"
            style="padding-top: .4rem; padding-bottom: .6rem; padding-left: 1rem; border-radius: .3rem; width:150px;">
            <option value="grid" selected>Grid</option>
            <option value="random">Random</option>
            <option value="circle">Circle</option>
            <option value="concentric">Concentric</option>
            <option value="breadthfirst">Breadthfirst</option>
            <option value="cose">Cose</option>
            <option value="cose-bilkent">Cose-bilkent</option>
            <option value="cola">Cola</option>
            <option value="euler">Euler</option>
            <option value="dagre">Dagre</option>
            <option value="klay">Klay</option>
        </select>

        <input type="checkbox" class="btn-check" id="show-labels" checked autocomplete="off">
        <label class="btn btn-outline-secondary" for="show-labels">Show Labels</label>

        <div class="btn-group" role="group" aria-label="Show layers for the graph group">
            <button id="show-all" class="btn btn-warning" type="submit">Show all nodes</button>

            <input type="checkbox" class="btn-check" id="toggle-abstract-layer" checked autocomplete="off">
            <label class="btn btn-outline-secondary" for="toggle-abstract-layer">Abstract layer</label>

            <input type="checkbox" class="btn-check" id="toggle-concrete-layer" checked autocomplete="off">
            <label class="btn btn-outline-secondary" for="toggle-concrete-layer">Concrete layer</label>

            <input type="checkbox" class="btn-check" id="toggle-sequence-layer" checked autocomplete="off">
            <label class="btn btn-outline-secondary" for="toggle-sequence-layer">Sequence layer</label>

            <input type="checkbox" class="btn-check" id="toggle-layer-transitions" checked autocomplete="off">
            <label class="btn btn-outline-secondary" for="toggle-layer-transitions">Inter-layer edges</label>
        </div>

        <div class="btn-group" role="group" aria-label="Show amount of nodes">
            <button type="button" class="btn btn-secondary" disabled>
              Abstract States <span class="badge bg-light text-dark rounded-pill" id="stats-abstract-states"></span>
            </button>
            <button type="button" class="btn btn-secondary" disabled>
              Abstract Actions <span class="badge bg-light text-dark rounded-pill" id="stats-abstract-actions"></span>
            </button>
            <button type="button" class="btn btn-secondary" disabled>
              Concrete States <span class="badge bg-light text-dark rounded-pill" id="stats-concrete-states"></span>
            </button>
            <button type="button" class="btn btn-secondary" disabled>
              Concrete Actions <span class="badge bg-light text-dark rounded-pill" id="stats-concrete-actions"></span>
            </button>
        </div>
    </div>
</div>


    <div class="viewpane" id="cy">
    </div>

    <div class="cd-panel cd-panel--from-right js-cd-panel-main">
        <div class="cd-panel__container">
            <div class="panel-header" id="content-panel-header">
            </div>
            <div class="cd-panel__content" id="cd-content-panel">
            </div> <!-- cd-panel__content -->
        </div> <!-- cd-panel__container -->
    </div>
}
else
{
    <div class="text-center">
        <h1>@ProgressStatus</h1>
        <div class="spinner-border" role="status">
            <span class="visually-hidden">loading</span>
        </div>
    </div>
} 

@code {
    public bool IsGraphAvailable { get; set; } = false;
    public string ProgressStatus { get; set; } = "Loading graph data...";
    [Parameter] public string ModelIdentifier { get; set; }
    public string? GraphInJson { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var elements = await graphService.FetchGraph(new ModelIdentifier(ModelIdentifier), false);

        foreach (var element in elements)
        {
            if (element.Document.Properties.TryGetValue("screenshot", out var screenshotId))
            {
                ProgressStatus = $"Download image {screenshotId.ToString()}.png";
                StateHasChanged();

                var base64screenshot = await graphService.DownloadScreenshotAsync(screenshotId.ToString()!);

                element.Document.Properties["screenshot"] = base64screenshot;
            }
        }

        var epocMili = DateTime.UtcNow.Millisecond;
        var graphName = $"{ModelIdentifier}_AC_{epocMili}_elements.json";

        ProgressStatus = "Transforming graph data";
        StateHasChanged();

        GraphInJson = JsonSerializer.Serialize(elements);
         
        ProgressStatus = "Loading graph done";
        IsGraphAvailable = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsGraphAvailable)
        {
            await JS.InvokeVoidAsync("loadGraphCanvas", GraphInJson);
        }
    }
}
