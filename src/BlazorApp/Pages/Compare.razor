@page "/Compare/{App1ModelIdentifier}/To/{App2ModelIdentifier}"
@page "/Compare/{App1ModelIdentifier}/To/{App2ModelIdentifier}/{SelectedElementId}"
@inject IJSRuntime JS
@inject ICompareGraph graphCompareService;
@inject IModelService modelService;
@inject IGraphService graphService;
@inject IScreenshotService screenshotService;
@inject NavigationManager navigationManager;
@inject MergeOverlappingEdgesSetting mergeOverlappingEdgesSetting;
@inject IMergeGraphFactory graphMerger;

<AuthorizeView>
    <NotAuthorized>
        <div class="p-3">
            <h1>Welcome to TESTAR .NET</h1>
            Please sign in to view your graph.
        </div>
    </NotAuthorized>
    <Authorized>
    <div class="container-fluid p-3">
        <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
            
            <div class="input-group me-2" >
                <span class="input-group-text" id="Layout-text">Layout</span>
                <select id="layout-control" class="form-control text-secondary" aria-label="Default select example"
                    aria-describedby="Layout-text" onchange="changeLayout('mergeCy', this.value);" >
                    <option value="grid">Grid</option>
                    <option value="random">Random</option>
                    <option value="circle">Circle</option>
                    <option value="concentric">Concentric</option>
                    <option value="breadthfirst">Breadthfirst</option>
                    <option value="cose">Cose</option>
                    <option value="cose-bilkent" selected>Cose-bilkent</option>
                    <option value="cola">Cola</option>
                    <option value="euler">Euler</option>
                    <option value="dagre">Dagre</option>
                    <option value="klay">Klay</option>
                </select>
            </div>

            <div class="btn-group me-2" role="group">
                <input type="checkbox" class="btn-check" id="show-labels" checked autocomplete="off"
                onchange="showLabel('mergeCy', this.value);">
                <label class="btn btn-outline-secondary" for="show-labels">Show Labels</label>
            </div>

         @*   <div class="btn-group" role="group" aria-label="Show amount of nodes">
                <button type="button" class="btn btn-secondary" disabled>
                  Abstract States <span class="badge bg-light text-dark rounded-pill" id="stats-abstract-states"></span>
                </button>
                <button type="button" class="btn btn-secondary" disabled>
                  Abstract Actions <span class="badge bg-light text-dark rounded-pill" id="stats-abstract-actions"></span>
                </button>
            </div>*@
        </div>
    </div>

    <footer class="footer mt-auto py-3">
        <div class="container-fluid">
            <div class="text-end">
                <div class="btn-group dropup">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuClickable" data-bs-toggle="dropdown" data-bs-auto-close="false" aria-expanded="false">
                  Open legend
                </button>
                <div class="dropdown-menu pt-0 mx-0 rounded-3 shadow overflow-hidden" style="width: 280px;">
                  <ul class="list-unstyled mb-0">
                    <li>
                      <div class="dropdown-item d-flex align-items-center gap-2 py-2" id="legend-abstract-state">
                        <span class="border border-dark px-4 py-3" style="background-color: #1C909A;"></span>Abstract state
                      </div>
                    </li>
                    <li>
                      <div class="dropdown-item d-flex align-items-center gap-2 py-2" id="legend-concrete-state">
                        <span class="border border-dark px-4 py-3" style="background-color: #67A9CF;"></span>Concrete State
                      </div>
                    </li>
                    <li>
                      <div class="dropdown-item-text d-flex align-items-center gap-2 py-2">
                        <span class="border border-dark px-4 py-3" style="background-color: #016450;"></span>Sequence Node
                      </div>
                    </li>
                    <li>
                      <div class="dropdown-item-text d-flex align-items-center gap-2 py-2">
                        <span class="border border-dark px-4 py-3" style="background-color: #014636;"></span>First Sequence Node
                      </div>
                    </li>
                    <li>
                      <div class="dropdown-item-text d-flex align-items-center gap-2 py-2">
                        <span class="border border-dark px-4 py-3" style="background-color: #e7298a;"></span>Widget
                      </div>
                    </li>
                    <li>
                      <div class="dropdown-item-text d-flex align-items-center gap-2 py-2">
                        <span class="border border-dark px-4 py-3" style="background-image: url('../img/blackhole-bg.jpg'); background-size:contain"></span>Black hole
                      </div>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
        </div>
    </footer>

@if (IsGraphAvailable)
{
<div class="container-fluid" style="height: calc(100% - 70px); ">
    <div class="row" style="height:100%" >
        <div class="col-12" style="height: 100%;">
            <div id="mergeCy" style="height:100%;" >
            </div>
        </div>
       
    </div>
</div>

    <div class="cd-panel cd-panel--from-right js-cd-panel-main @(SelectedElement is null ? "cd-panel--is-hiden" : "cd-panel--is-visible")" >
        <div class="cd-panel__container">
            <CompareElementViewer @ref="graphElementViewer" ShowButtons="false" />
        </div>
    </div>
    
}
else
{
    <div class="text-center">
        <h1>@ProgressStatus</h1>
        <div class="spinner-border" role="status">
            <span class="visually-hidden">loading</span>
        </div>
    </div>
} 
</Authorized>
</AuthorizeView>

@code {
    public bool IsGraphAvailable { get; set; } = false;
    public bool IsGraphVisible { get; set; } = false;

    public string ProgressStatus { get; set; } = "Loading graph data...";
    [Parameter] public string App1ModelIdentifier { get; set; }
    [Parameter] public string App2ModelIdentifier { get; set; }
    [Parameter] public string? SelectedElementId { get; set; }
    private DotNetObjectReference<Compare>? dotNetHelper;
    public CompareElementViewer graphElementViewer;

    public string? App1GraphInJson { get; set; }
    public string? App2GraphInJson { get; set; }
    public string? MergeGraphInJson { get; set; }
    
    public Model? App1Model { get; set; }
    public Model? App2Model { get; set; }

    public AppGraph? AppGraph1 { get; set; }
    public AppGraph? AppGraph2 { get; set; }
    public AppGraph? MergeGraph { get; set; }

    private GraphElement? SelectedElement { get; set; }

    [JSInvokable]
    public async Task UpdateSelectedElement(string id)
    {
        await Task.Delay(0);

        if (AppGraph1 is not null && AppGraph2 is not null)
        {
            var selectedElement = AppGraph1.Elements
                .FirstOrDefault(x => x.Document.Id == id);

            if (selectedElement is null)
            {
                selectedElement = AppGraph2.Elements
                    .FirstOrDefault(x => x.Document.Id == id);
            }

            if (selectedElement is not null)
            {
                navigationManager.NavigateTo($"{navigationManager.BaseUri}Compare/{App1ModelIdentifier}/To/{App2ModelIdentifier}/{id}");
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (SelectedElementId is not null && AppGraph1 is not null && AppGraph2 is not null)
        {
            var selectedElement = AppGraph1.Elements
                .FirstOrDefault(x => x.Document.Id == SelectedElementId 
                    || x["@rid"].AsOrientDbId().FormatId() == SelectedElementId);

            if (selectedElement is null)
            {
                selectedElement = AppGraph2.Elements
                .FirstOrDefault(x => x.Document.Id == SelectedElementId 
                    || x["@rid"].AsOrientDbId().FormatId() == SelectedElementId);
            }

            if (selectedElement is not null)
            {
                SelectedElement = selectedElement;
                StateHasChanged();
                if (graphElementViewer is not null)
                {
                    graphElementViewer.ShowGraphElementAsync($"Compare/{App1ModelIdentifier}/To/{App2ModelIdentifier}", selectedElement);
                }
            }
        }

        if (SelectedElementId is null && SelectedElement is not null)
        {
            SelectedElement = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var model1 = await modelService.ByIdentifier(new ModelIdentifier(App1ModelIdentifier));
        var model2 = await modelService.ByIdentifier(new ModelIdentifier(App2ModelIdentifier));

        var results = await graphCompareService.CompareAsync(model2, model1);

        var mergeGraph = graphMerger.Create(results);

        //await DownloadScreenshotAsync(results.OldGraphApp);
       // await DownloadScreenshotAsync(results.NewGraphApp);
     //   await DownloadScreenshotAsync(mergeGraph);

        ProgressStatus = "Transforming graph data";
        StateHasChanged();

        App1GraphInJson = JsonSerializer.Serialize(results.OldGraphApp.Elements);
        App2GraphInJson = JsonSerializer.Serialize(results.NewGraphApp.Elements);
        MergeGraphInJson = JsonSerializer.Serialize(mergeGraph.Elements);

        AppGraph1 = results.OldGraphApp;
        AppGraph2 = results.NewGraphApp;
        MergeGraph = mergeGraph;

        ProgressStatus = "Loading graph done";
        IsGraphAvailable = true;

        OnParametersSet();
    }

    private async Task DownloadScreenshotAsync(AppGraph graph)
    {
        foreach (var element in graph.Elements)
        {
            if (element.Document.Properties.TryGetValue("screenshot", out var screenshotId))
            {
                ProgressStatus = $"Download image {screenshotId.ToString()}.png";
                StateHasChanged();

                var base64screenshot = await screenshotService.DownloadScreenshotAsync(screenshotId.ToString()!);

                element.Document.Properties["screenshot"] = base64screenshot.Value;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsGraphAvailable  && !IsGraphVisible)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            IsGraphVisible = true;

            //await JS.InvokeVoidAsync("loadGraphCanvas", App1GraphInJson, "cyApp1", dotNetHelper);
            //await JS.InvokeVoidAsync("loadGraphCanvas", App2GraphInJson, "cyApp2", dotNetHelper);
            await JS.InvokeVoidAsync("loadGraphCanvas", MergeGraphInJson, "mergeCy", dotNetHelper);
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }
}
