@page "/{ModelIdentifier}"
@page "/"
@inject IModelService modelService;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<AuthorizeView>
    <NotAuthorized>
        <div class="p-3">
            <h1>Welcome to TESTAR .NET</h1>
            Please sign in to view your available models.
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="sidebar">
            <div class="d-flex flex-column align-items-stretch flex-shrink-0 bg-light" style="width: 450px;">
                <div style="overflow-y:auto">
                    <div class="d-flex align-items-center flex-shrink-0 link-dark text-decoration-none pb-1">
                        <div class="px-3 pt-3">
                            <span class="fs-5 fw-semibold">Models</span>
                        </div>
                    </div>
                    <div class="d-flex align-items-center flex-shrink-0 link-dark text-decoration-none pb-1">
                        <div class="px-3 py-3 input-group mb-3">
                          <span class="input-group-text" id="basic-addon1">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                              <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"></path>
                            </svg>
                          </span>

                          <input type="text" @oninput="@(e => { Search((string?)e.Value);})" placeholder="Search"
                                 class="form-control" aria-label="Search box">
                        </div>
                    </div>
                    @if (IsLoadingModels)
                    {
                        <div class="d-flex align-items-center flex-shrink-0 link-dark text-decoration-none pb-1">
                            <div class="px-3 py-3 mx-auto">
                                <div class="spinner-border" role="status">
                                  <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @foreach(var model in models)
                        {
                            <div class="group-list px-3 mb-2">
                                <a href="/@model.ModelIdentifier.Value" class="list-group-item list-group-item-action rounded-3">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h5 class="mb-1">@model.Name</h5>
                                        <small class="text-muted">@model.ModelIdentifier.Value</small>
                                    </div>
                                    <p class="mb-1">@model.Version</p>
                                    <small class="text-muted">@string.Join(", ", model.AbstractionAttributes)</small>
                                </a>
                            </div>
                        }

                        if(!models.Any() && !string.IsNullOrEmpty(SearchString))
                        {
                            <span class="px-3 text-muted">Unable to find any models with your search</span>
                        }
                    }
                </div>
            </div>

          @if (SelectedModel is not null)
          {
              <div class="p-2 flex-fill px-3 py-3">
                  <div class="row">
                      <div class="col-8">
                        <div class="fs-5 fw-semibold">@SelectedModel.Name</div>
                        <div class="fs-7 text-muted">@SelectedModel.Version</div>
                      </div>
                      <div class="col-4 text-end align-self-center">
                          <a href="/Graph/@SelectedModel.ModelIdentifier.Value" class="btn btn-secondary">Open Graph</a>
                        
                                <div class="btn-group m-1">
                                    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        Compare with
                                    </button>
                                    <ul class="dropdown-menu">
                                        @foreach (var model in models)
                                        {
                                            <li>
                                                <a class="dropdown-item @(model == SelectedModel ? "disabled" : "")" href="/Compare/@SelectedModel.ModelIdentifier.Value/To/@model.ModelIdentifier.Value">
                                                    <div>@model.Name</div>
                                                    <div class="text-muted">@model.Version</div>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            
                        </div>
                  </div>
                  <div class="row mt-3">
                      <div class="col-12">

                            <div class="card">
                                <div class="card-header">
                                    Test Sequences
                                </div>
                                @if (IsLoadingSelectedModel)
                                {
                                    <div class="mx-auto m-5">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <table class="table table-borderless mt-1">
                                        <thead class="table-white">
                                            <tr>
                                                <th scope="col"></th> <!-- Icon -->
                                                <th scope="col">Start data/time</th>
                                                <th scope="col">Number of steps</th>
                                                <th scope="col">Quirks</th>
                                                <th scope="col">Deterministic run</th>
                                                <th scope="col"></th> <!-- button -->
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var sequence in TestSequences)
                                            {
                                                <tr>
                                                    <td>
                                                        @if (sequence.Verdict == Verdict.Success)
                                                        {
                                                            <i class="bi bi-hand-thumbs-up-fill text-success"></i>
                                                        }
                                                        @if (sequence.Verdict == Verdict.InterruptBySystem)
                                                        {
                                                            <i class="bi bi-exclamation text-error"></i>
                                                        }
                                                        @if (sequence.Verdict == Verdict.InterruptByUser)
                                                        {
                                                            <i class="bi bi-hand-index text-primary"></i>
                                                        }
                                                        @if (sequence.Verdict == Verdict.Unknown)
                                                        {
                                                            <i class="bi bi-question text-primary"></i>
                                                        }
                                                    </td>
                                                    <td>@sequence.StartDateTime.ToString("MMM dd, yyyy h:mm:ss tt")</td>
                                                    <td>@sequence.NumberOfSteps</td>
                                                    <td>@sequence.NumberOfErrors</td>
                                                    <td>
                                                        @if (@sequence.IsSequenceDeterministic)
                                                        {
                                                            <i class="fs-6 bi bi-check text-success"></i>
                                                        }
                                                        @if (!@sequence.IsSequenceDeterministic)
                                                        {
                                                            <i class="fs-6 bi bi-x text-error"></i>
                                                        }
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-secondary" @onclick="(e) => ShowTestSequenceAsync(e, sequence)">Show</button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                      </div>
                  </div>
              </div>
          }
        </div>
    </Authorized>
</AuthorizeView>



@code {
    [Parameter] public string? ModelIdentifier { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    public Model? SelectedModel { get; set; }
    public List<Model> models = new();
    public List<Model> allModels = new();
    public List<TestSequence> TestSequences = new();
    public bool IsLoadingModels { get; set; }
    public bool IsLoadingSelectedModel { get; set; }
    public string? SearchString
    {
        get;set;
    }

    public void Search(string? value)
    {
        if (value is not null)
        {
            SearchString = value;

            models = allModels.Where(x => 
                x.Version.ToString().Contains(SearchString) ||
                x.Name.Contains(SearchString) ||
                x.ModelIdentifier.Value.Contains(SearchString)
            ).ToList();

        }
        else
        {
            models = allModels.ToList();
        }

        StateHasChanged();

    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user is not null && user.Identity is not null && user.Identity.IsAuthenticated)
        {

            if (!allModels.Any())
            {
                IsLoadingModels = true;
                StateHasChanged();
                allModels = await modelService.AllModels().ToListAsync();
                IsLoadingModels = false;
                Search(SearchString);
            }

            await base.OnInitializedAsync();
        }
    }

    private EventCallback ShowTestSequenceAsync(MouseEventArgs s, TestSequence testSequence)
    {
        var options = new ModalOptions();
        var parameters = new ModalParameters();
        parameters.Add("TestSequence", testSequence);

        var loading = Modal.Show<TestSequenceVisualisations>("Test Sequence Visualisation", parameters, options );

        return EventCallback.Empty;
    }

    protected async override Task OnParametersSetAsync()
    {
        TestSequences.Clear();

        if (ModelIdentifier is not null)
        {
            IsLoadingSelectedModel = true;
            StateHasChanged();

            var modelId = new ModelIdentifier(ModelIdentifier);
            SelectedModel = models.FirstOrDefault(x => x.ModelIdentifier == modelId);
            TestSequences = await modelService.TestSequences(modelId).ToListAsync();

            IsLoadingSelectedModel = false;
            StateHasChanged();
        }

        if (ModelIdentifier is not null && SelectedModel is null)
        {
            SelectedModel = new Model
            {
                Name = $"Model with {ModelIdentifier} not found.",
                Version = "",
                AbstractionAttributes = Array.Empty<string>(),
                AbstractStates = Array.Empty<AbstractState>(),
                ModelIdentifier = new ModelIdentifier(""),
             };
        }
    }
}
