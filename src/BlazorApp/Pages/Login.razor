@page "/login"
@inject ILocalStorageService localStorage;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthStateProvider;
@inject IOrientDbLoginService loginService;

<h3>Login</h3>

<EditForm Model="user" OnSubmit="HandleLogin">
    <div class="form-group">
        <label for="url">OrientDB Url</label>
        <InputText id="url" @bind-bind-Value="user.OrientDbUrl" class="form-control" />
    </div>

    <div class="form-group">
        <label for="url">Testar database name</label>
        <InputText id="databasename" @bind-bind-Value="user.DatabaseName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="user.UserName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

</EditForm>


@code
{
    private User user = new User();

    private async void HandleLogin()
    {
        try
        {
            var session = await loginService.LoginAsync(new Uri(user.OrientDbUrl), user.DatabaseName, user.UserName, user.Password);

            await localStorage.SetItemAsStringAsync("orientdb-url", user.OrientDbUrl);
            await localStorage.SetItemAsStringAsync("orientdb-session", session.SessionId);
            await localStorage.SetItemAsStringAsync("username", user.UserName);
            await localStorage.SetItemAsStringAsync("testar-database", user.DatabaseName);

            await AuthStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("");
        } 
        catch(Exception ex)
        {
            throw;
        }
    }
}
