@inject IMediator mediator;
@inject IStrategyBuilder strategies;
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager;
@inject IModelService modelService;


<h3>Available Models</h3>


    <div class="row p-3">
        <div class="col-8">
            <div class="list-group">
                @foreach(var application in applicationListViewModel.Applications)
                {
                  <div class="list-group-item">
                      <div class="d-flex w-100 justify-content-between">
                          <h5 class="mb-1">@application.ApplicationName</h5>
                          <small class="text-muted">@application.ModelIdentifier.Value</small>
                      </div>
                      <p class="mb-1">@application.ApplicationVersion</p>
                      <div class="d-flex w-100 justify-content-between">
                        <small class="text-muted">@string.Join(", ", application.AbstractionAttributes)</small>
                        <div class="btn-group">
                            <button type="submit" class="btn btn-primary btn-sm" @onclick="(e) => SetAsControl(e, application)">Add as control</button>
                            <button type="submit" class="btn btn-primary btn-sm" @onclick="(e) => SetAsTest(e, application)" >Add as test</button>
                            <button type="submit" class="btn btn-secondary btn-sm" @onclick="(e) => OpenModel(e, application)" >Open model</button>
                        </div>
                      </div>
                  </div>
                }
            </div>

            <br/>

           

        </div>
        <div class="col-4">
            <div class="card">
                <div class="card-header">Compare</div>
                @if (controlApplication != null)
                {
                    <div class="card-body">
                        <h5 class="card-title">@controlApplication.ApplicationName</h5>
                        <p class="card-text">@controlApplication.ApplicationVersion</p>
                    </div>
                }
            </div>

            <div class="card">
                <div class="card-header">With</div>
                @if (testApplication != null)
                {
                    <div class="card-body">
                        <h5 class="card-title">@testApplication.ApplicationName</h5>
                        <p class="card-text">@testApplication.ApplicationVersion</p>
                    </div>
                }
            </div>

            <div class="card">
                <select class="form-select" aria-label="Select strategy" @bind="@strategyName">
                @foreach(var strat in strategies.Names())
                {
                    <option>@strat</option>
                }
                </select>
                 <button type="submit" disabled="@disableExecution" @onclick="() => ExecuteChangeDetection()"
            class="btn btn-primary">Execute Change Detection</button>
            </div>
        </div>
    </div>

@code {
    ApplicationListViewModel applicationListViewModel = new();
    [CascadingParameter] public IModalService Modal { get; set; }

    private ApplicationViewModel? controlApplication { get; set; } = null;
    private ApplicationViewModel? testApplication { get; set; } = null;
    private bool disableExecution { get; set; } = true;
    private string? strategyName { get; set; } = "Proof Of concept - Abstract State Comparison";


    private EventCallback OpenModel(MouseEventArgs s, ApplicationViewModel application)
    {
        NavigationManager.NavigateTo($"Graph/{application.ModelIdentifier.Value}");

        return EventCallback.Empty;
    }

    private EventCallback SetAsStrategy(EventArgs s, string name)
    {
        strategyName = name;

        return EventCallback.Empty;
    }

    private EventCallback SetAsControl(MouseEventArgs s, ApplicationViewModel application)
    {
        controlApplication = application;

        if (controlApplication == testApplication)
        {
            testApplication = null;
        }

        disableExecution = (controlApplication is null || testApplication is null);

        return EventCallback.Empty;
    }

    private EventCallback SetAsTest(MouseEventArgs s, ApplicationViewModel application)
    {
        testApplication = application;

        if (controlApplication == testApplication)
        {
            controlApplication = null;
        }

        disableExecution = (controlApplication is null || testApplication is null);

        return EventCallback.Empty;
    }

    public void SelectionChanged()
    {
        var count = applicationListViewModel.Applications.Count(x => x.IsSelected);

        Console.WriteLine(count);
    }

    private async void ExecuteChangeDetection()
    {
        if (controlApplication is not null && testApplication is not null && strategyName is not null)
        {
            var strategy = strategies.GetStrategyByName(strategyName);

            var options = new ModalOptions
                {
                    HideCloseButton = false,
                    DisableBackgroundCancel = true,
                    HideHeader = true
                };

            var loading = Modal.Show<Loading>(string.Empty, options);

            var control = await mediator.Send(new ApplicationRequest
                {
                    ApplicationName = controlApplication.ApplicationName,
                    ApplicationVersion = controlApplication.ApplicationVersion
                });

            var test = await mediator.Send(new ApplicationRequest
                {
                    ApplicationName = testApplication.ApplicationName,
                    ApplicationVersion = testApplication.ApplicationVersion
                });

            var fileHandler = new FileHandler(control, test);

            await strategy.ExecuteChangeDetectionAsync(control, test, fileHandler);

            var fileStream = fileHandler.DownloadOutputAsZip();
            var fileName = $"{controlApplication.ApplicationName}_{controlApplication.ApplicationVersion}_diff_{testApplication.ApplicationName}_{testApplication.ApplicationVersion}.zip";
            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

            loading.Close();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var models = await modelService.AllModels().ToListAsync();

        applicationListViewModel.Applications = models
            .Select(x => new ApplicationViewModel(applicationListViewModel)
            {
                ApplicationName = x.Name,
                ApplicationVersion = x.Version,
                ModelIdentifier = x.ModelIdentifier,
                IsSelected = false,
                AbstractionAttributes = x.AbstractionAttributes
            })
            .ToArray();

        await base.OnInitializedAsync();
    }
}
