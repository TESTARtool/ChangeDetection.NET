@inject IJSRuntime JS
@inject ShowOrientDbElementData showOrientDbElementData

    <nav class="navbar navbar-dark bg-dark">
        <div class="container-fluid">
            <div class="navbar-brand text-warning">@SelectedElement?.TypeName - Details</div>
            <a href="/@BaseUrl" class="btn btn-close btn-close-white text-reset" aria-label="Close" ></a>
        </div>
    </nav>


@if (SelectedElement is not null)
{
    <div class="p-3">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
          <li class="nav-item" role="presentation">
              <button class="nav-link active" id="screenshot-tab" data-bs-toggle="tab" data-bs-target="#screenshotTab" type="button" role="tab" aria-controls="screenshot-tab" aria-selected="true">Screenshot</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="compare-tab" data-bs-toggle="tab" data-bs-target="#compareTab" type="button" role="tab" aria-controls="compare-tab" aria-selected="true">Compare data</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="detail-tab" data-bs-toggle="tab" data-bs-target="#detailTab" type="button" role="tab" aria-controls="detail-tab" aria-selected="false">Element Data</button>
          </li>
        </ul>
        <div class="tab-content p-1" id="myTabContent">
            <div class="tab-pane fade active show" id="screenshotTab" role="tabpanel" aria-labelledby="screenshot-tab">
                @if (NewScreenshot is not null)
                {
                    <h3>New version</h3>
                    <img alt="Concrete state screenshot" class="card-img" src="data:image/png;base64, @NewScreenshot">
                }
                @if (OldScreenshot is not null)
                {
                    <h3>Old version</h3>
                    <img alt="Concrete state screenshot" class="card-img" src="data:image/png;base64, @OldScreenshot">
                }
                @if (CompareScreenshot is not null)
                {
                    <h3>Compared version</h3>
                    <img alt="Concrete state screenshot" class="card-img" src="data:image/png;base64, @CompareScreenshot">
                }
            </div>
            <div class="tab-pane fade" id="compareTab" role="tabpanel" aria-labelledby="compare-tab">
            <h3>Added Element Data</h3>
            <div class="table-responsive">
                <table class="table table-striped table-hover w-100" >
                    <thead>
                        <tr>
                            <th data-field="name">Element Name</th>
                            <th data-field="value">Element Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var element in AddedProperties)
                        {
                            <tr>
                                <td>@element.Key.Substring(3)</td>
                                <ElementData Key="@element.Key" Value="@element.Value" BaseUrl="@BaseUrl" />
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <h3>Removed Element Data</h3>
            <div class="table-responsive">
                <table class="table table-striped table-hover w-100" >
                    <thead>
                        <tr>
                            <th data-field="name">Element Name</th>
                            <th data-field="value">Element Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var element in RemovedProperties)
                        {
                            <tr>
                                <td>@element.Key.Substring(3)</td>
                                <ElementData Key="@element.Key" Value="@element.Value" BaseUrl="@BaseUrl" />
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <h3>Changed Element Data</h3>
            <div class="table-responsive">
                <table class="table table-striped table-hover w-100" >
                    <thead>
                        <tr>
                            <th data-field="name">Element Name</th>
                            <th data-field="value">Old Value</th>
                            <th data-field="value">New Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var element in ChangeDetectionProperties)
                        {
                            <tr>
                                <td>@element.Key</td>
                                    <ElementData Key="@element.Key" Value="@element.New" OldValue="@element.Old" BaseUrl="@BaseUrl" />
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
          </div>
          <div class="tab-pane fade" id="detailTab" role="tabpanel" aria-labelledby="detail-tab">
            <div class="form-group">
                <input class="form-control  w-50" type="text" placeholder="Filter..."
                       @bind="Filter"
                       @bind:event="oninput">
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover w-100" >
                    <thead>
                        <tr>
                            <th data-field="name">Element Name</th>
                            <th data-field="value">Element Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var element in Properties)
                        {
                            if (IsVisible(element))
                            {
                                  <tr>
                                    <td>@element.Key</td>
                                    <ElementData Key="@element.Key" Value="@element.Value" BaseUrl="@BaseUrl" />
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
          </div>
        </div>
    </div>
}

@code {
    public string BaseUrl { get; set; }
    public List<KeyValuePair<string, object>> Properties = new();
    public List<KeyValuePair<string, object>> AddedProperties = new();
    public List<KeyValuePair<string, object>> RemovedProperties = new();
    public List<ChangedProperty> ChangeDetectionProperties = new();
    public string? NewScreenshot;
    public string? OldScreenshot;
    public string? CompareScreenshot;
    public GraphElement? SelectedElement { get; set; }
    public bool IsAbstractState { get; set; }
    private string Filter { get; set; }

    [Parameter]
    public bool ShowButtons { get; set; }

    public bool IsVisible(KeyValuePair<string, object> property)
    {
        if (!showOrientDbElementData.Value && property.Key.StartsWith("@"))
        {
            return false;
        }

        if (string.IsNullOrEmpty(Filter))
        {
            return true;
        }

        return property.Key.Contains(Filter, StringComparison.CurrentCultureIgnoreCase);
    }

    public async Task ShowGraphElementAsync(string baseUrl, GraphElement element)
    {
        ChangeDetectionProperties.Clear();
        BaseUrl = baseUrl;
        SelectedElement = element;
        IsAbstractState = SelectedElement.IsAbstractState;
        if (SelectedElement.Document.Properties.TryGetValue("CD_CN_screenshot", out var newScreenshot))
        {
            NewScreenshot = newScreenshot.ToString();
        }
        else
        {
            NewScreenshot = null;
        }

        if (SelectedElement.Document.Properties.TryGetValue("CD_CO_screenshot", out var oldScreenshot))
        {
            OldScreenshot = oldScreenshot.ToString();
        }
        else
        {
            OldScreenshot = null;
        }

        if (newScreenshot != null && oldScreenshot != null)
        {
            CompareScreenshot = await JS.InvokeAsync<string>("pixelmatchInterop.compareImages", newScreenshot.ToString(), oldScreenshot.ToString());
        }
        else
        {
            CompareScreenshot = null;
        }

        Properties = element.Document.Properties

            .Where(x => !x.Key.StartsWith("CD_A_") 
                && !x.Key.StartsWith("CD_R_") 
                && !x.Key.StartsWith("CD_CN_") 
                && !x.Key.StartsWith("CD_CO_"))
            .OrderBy(x => x.Key)
            .ToList();

        AddedProperties = element.Document.Properties
            .Where(x => x.Key.StartsWith("CD_A_"))
            .OrderBy(x => x.Key)
            .ToList();

        RemovedProperties = element.Document.Properties
            .Where(x => x.Key.StartsWith("CD_R_"))
            .OrderBy(x => x.Key)
            .ToList();

        var changedNewProperties = element.Document.Properties
            .Where(x => x.Key.StartsWith("CD_CN_") && !x.Key.StartsWith("CD_CO_screenshot"))
            .OrderBy(x => x.Key)
            .ToList();

        foreach (var property in changedNewProperties)
        {
            var key = property.Key.Replace("CD_CN_", "");
            ChangeDetectionProperties.Add(new ChangedProperty
            {
                Key = key,
                New = property.Value.ToString() ?? string.Empty,
                Old = element[$"CD_CO_{key}"].Value,
            });
        }

        StateHasChanged();
    }
}