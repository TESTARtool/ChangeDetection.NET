@inject IJSRuntime JS
@inject ShowOrientDbElementData showOrientDbElementData

    <nav class="navbar navbar-dark bg-dark">
        <div class="container-fluid">
            <div class="navbar-brand text-warning">@SelectedElement?.TypeName - Details</div>
            <a href="/@BaseUrl" class="btn btn-close btn-close-white text-reset" aria-label="Close" ></a>
        </div>
    </nav>

@if (SelectedElement is not null)
{
    @if (SelectedElement.Document is Vertex)
    {
        <div class="pt-3">
            <div class="container-fluid">
                @if (SelectedElement.IsConcreteState)
                {
                    <a href="#" class="btn btn-secondary me-1" >Inspect Widget tree</a>
                }
                <button type="button" class="btn btn-secondary" onclick="hideElement('cy', '#@SelectedElement.Document.Id')" >Hide Node</button>
                <button type="button" class="btn btn-secondary" onclick="highlightElement('cy', '#@SelectedElement.Document.Id')" >Highlight</button>
                @if (SelectedElement.IsConcreteState)
                {
                    <button type="button" class="btn btn-secondary ms-1" onclick="tracePath('cy', '#@SelectedElement.Document.Id')" >Trace Path</button>
                }
                @if (SelectedElement.IsTestSequence)
                {
                    <button type="button" class="btn btn-secondary" onclick="traceSequence('cy', '#@SelectedElement.Document.Id')" >Trace Test Sequence</button>
                }
            </div>
        </div>
    }
    <div class="p-3">
        @if (SelectedElement.IsConcreteState)
        {
            <img alt="Concrete State screenshot" src="data:image/png;base64,@SelectedElement["screenshot"].Value">
        }
        @if (SelectedElement.IsAbstractState)
        {
            @foreach (var concreteState in SelectedElement["concreteStateIds"].AsArray())
            {
                <img alt="Concrete state screenshot" 
                    src ="data:image/png;base64, @AppGraph.ConcreteStates.FirstOrDefault(x => x["ConcreteIDCustom"] == concreteState)?["screenshot"].Value"
                >
            }
        }

        <h3>Element Data</h3>
        <div class="form-group">
            <input class="form-control w-50" type="text" placeholder="Filter..."
                   @bind="Filter"
                   @bind:event="oninput">
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover w-100" >
                <thead>
                    <tr>
                        <th data-field="name">Element Name</th>
                        <th data-field="value">Element Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var element in Properties)
                    {
                        if (IsVisible(element))
                        {
                            <tr>
                                <td>@element.Key</td>
                                <ElementData Key="@element.Key" Value="@element.Value" BaseUrl="@BaseUrl" />
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@code {
    public string BaseUrl { get; set; }
    public List<KeyValuePair<string, object>> Properties = new();
    public GraphElement? SelectedElement { get; set; }
    private AppGraph AppGraph { get; set; }
    private string Filter { get; set; }

     public bool IsVisible(KeyValuePair<string, object> property)
    {
        if (!showOrientDbElementData.Value && property.Key.StartsWith("@"))
        {
            return false;
        }

        if (string.IsNullOrEmpty(Filter))
        {
            return true;
        }

        return property.Key.Contains(Filter, StringComparison.CurrentCultureIgnoreCase);
    }
    
    public void ShowGraphElementAsync(string baseUrl, AppGraph app, GraphElement element)
    {
        AppGraph = app;
        BaseUrl = baseUrl;
        SelectedElement = element;
        Properties = element.Document.Properties
            .Where(x => !x.Key.StartsWith("CD_"))
            .OrderBy(x => x.Key)
            .ToList();

        StateHasChanged();
    }
}